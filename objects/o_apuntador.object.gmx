<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>m_x = room_width * 0.5;
m_y = room_height * 0.5;
pad = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if keyboard_check_released(ord('L'))
{
    pad = !pad;
}

if !pad
{
    m_x = mouse_x;
    m_y = mouse_y;
    if(m_x &lt; view_xview[0]){
        m_x = view_xview[0];
    }
    else if(m_x &gt; view_xview[0] + view_wview[0]){
        m_x = view_xview[0] + view_wview[0];
    }
    if(m_y &lt; view_yview[0]){
        m_y = view_yview[0];
    }
    else if(m_y &gt; view_yview[0] + view_hview[0]){
        m_y = view_yview[0] + view_hview[0];
    }
    
    var aux, tramo;
    aux = s_elidu(myid);
    if(aux != -1){
        if(keyboard_check(ord('Q'))){
            x = aux.x;
            y = aux.y;
        }
        else{
            direction = point_direction(aux.x, aux.y, m_x, m_y);
            tramo = point_distance(aux.x, aux.y, m_x, m_y) * 0.25;
            x = aux.x + lengthdir_x(tramo, direction);
            y = aux.y + lengthdir_y(tramo, direction) - 48;
        }
    }
    else{
        x = m_x;
        y = m_y;
    }
}
else if !keyboard_check(ord('Q'))
{
    var aux;
    if(keyboard_check(vk_up)){
        if(keyboard_check(vk_left)){
            aux = 135;
        }
        else if(keyboard_check(vk_right)){
            aux = 45;
        }
        else{
            aux = 90;
        }
    }
    else if(keyboard_check(vk_down)){
        if(keyboard_check(vk_left)){
            aux = 225;
        }
        else if(keyboard_check(vk_right)){
            aux = 315;
        }
        else{
            aux = 270;
        }
    }
    else{
        if(keyboard_check(vk_left)){
            aux = 180;
        }
        else if(keyboard_check(vk_right)){
            aux = 0;
        }
        else{
            aux = -1;
        }
    }
    if(aux != -1){
        var delta = delta_time * 0.000001;
        x += lengthdir_x(m_caminar * delta * 2, aux);
        y += lengthdir_y(m_caminar * delta * 2, aux);
    }
    var el = s_elidu(myid);
    if(el != -1){
        if point_distance(x, y, el.x, el.y) &gt; m_vision * 0.3
        {
            aux = point_direction(el.x, el.y, x, y);
            x = el.x + lengthdir_x(m_vision * 0.3, aux);
            y = el.y + lengthdir_y(m_vision * 0.3, aux);
        }
    }
    m_x = x;
    m_y = y;
}

depth = -m_y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(d_apuntador, 0, m_x, m_y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
