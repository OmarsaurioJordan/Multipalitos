<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = -room_height * 2;
ajuda = false;//mostrar ayuda visual
conexion = -1;
cliente = network_create_socket(network_socket_tcp);
ping = m_ping * 3;
telon = -1;
alarm[0] = 1;

if(cliente &lt; 0){
    s_creamensaje("connection fail", c_orange);
    room_goto(w_menu);
}
else{
    conexion = network_connect(cliente, o_control.q_web, o_control.q_puerto);
    if(conexion &lt; 0){
        s_creamensaje("connection fail", c_orange);
        room_goto(w_menu);
    }
    else{
        var ggg, aux;
        ggg = 1;
        repeat(m_unidades * 2){
            aux = instance_create(irandom(room_width), irandom(room_height), o_unidad);
            aux.xyz = ggg;
            ggg++;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///pintar mapa
var eee, xxx, yyy;
eee = 0.083333;
xxx = view_xview[0];
yyy = view_yview[0];

if(!surface_exists(telon)){
    telon = surface_create(440, 440);
    surface_set_target(telon);
    draw_clear_alpha(make_colour_rgb(199, 211, 154), 1);
    with(o_arbol){
        draw_sprite(d_minimapa, 0, (x - 24) * eee, (y - 24) * eee);
    }
    with(o_muro){
        draw_sprite(d_minimapa, 1, (x - 24) * eee, (y - 24) * eee);
    }
    with(o_base){
        switch(xyz){
            case 0:
                draw_sprite(d_minimapa, 2, (x - 24) * eee, (y - 24) * eee);
            break;
            case 1:
                draw_sprite(d_minimapa, 3, (x - 24) * eee, (y - 24) * eee);
            break;
            case 2:
                draw_sprite(d_minimapa, 4, (x - 24) * eee, (y - 24) * eee);
            break;
            case 3:
                draw_sprite(d_minimapa, 5, (x - 24) * eee, (y - 24) * eee);
            break;
            case 4:
                draw_sprite(d_minimapa, 6, (x - 24) * eee, (y - 24) * eee);
            break;
        }
    }
    surface_reset_target();
}

alarm[0] = room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///mostrar ayuda
if(ajuda){
    if(keyboard_check(vk_anykey)){
        ajuda = false;
    }
    else if(mouse_check_button(mb_any)){
        ajuda = false;
    }
}
else if(keyboard_check_released(vk_f1)){
    ajuda = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ping
ping -= delta_time * 0.000001;
if(ping &lt;= 0){
    s_creamensaje("connection lost", c_orange);
    room_goto(w_menu);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var mibuffer;
mibuffer = ds_map_find_value(async_load, "buffer");
buffer_seek(mibuffer, buffer_seek_start, 0);
switch(buffer_read(mibuffer, buffer_u8)){
    
    case 0:
        var sck;
        sck = buffer_read(mibuffer, buffer_u16);
        porpuntos = buffer_read(mibuffer, buffer_u8);
        wingrupo = buffer_read(mibuffer, buffer_u8);
        winunidad = buffer_read(mibuffer, buffer_u8);
        if(buffer_read(mibuffer, buffer_string) != m_version){
            s_creamensaje("different version", c_orange);
            room_goto(w_menu);
        }
        else{
            s_env1(sck);
        }
    break;
    
    case 2:
        s_creamensaje("existent name", c_orange);
        room_goto(w_menu);
    break;
    
    case 3:
        myid = buffer_read(mibuffer, buffer_u8);
        with(s_elidu(myid)){
            x = buffer_read(mibuffer, buffer_u16);
            y = buffer_read(mibuffer, buffer_u16);
            revive = buffer_read(mibuffer, buffer_f32);
            view_xview[0] = x - view_wview[0] * 0.5;
            view_yview[0] = y - view_hview[0] * 0.5;
        }
    break;
    
    case 4:
        with(s_elidu(buffer_read(mibuffer, buffer_u8))){
            municion = buffer_read(mibuffer, buffer_u8);
            salud = buffer_read(mibuffer, buffer_u8);
            puntos = buffer_read(mibuffer, buffer_u8);
            grupo = buffer_read(mibuffer, buffer_u8);
            clase = buffer_read(mibuffer, buffer_u8);
            energia = buffer_read(mibuffer, buffer_u8);
            pelo = buffer_read(mibuffer, buffer_u8);
            idioma = buffer_read(mibuffer, buffer_u8);
            estado = buffer_read(mibuffer, buffer_u8);
            nombre = buffer_read(mibuffer, buffer_string);
            wee = string_width(nombre) / 56;
            if(wee == 0){
                wee = 0.17857;
            }
            if(estado == 2 or estado == 4){
                mask_index = -1;
            }
            else{
                mask_index = d_base0;
            }
            if(estado == 1){
                revive = 0;
            }
        }
    break;
    
    case 5:
        ping = m_ping * 3;
    break;
    
    case 6:
        with(s_elidu(buffer_read(mibuffer, buffer_u8))){
            energia = buffer_read(mibuffer, buffer_u8);
        }
    break;
    
    case 7:
        with(s_elidu(buffer_read(mibuffer, buffer_u8))){
            expresion = buffer_read(mibuffer, buffer_u8);
            expresa = t_expresa;
        }
    break;
    
    case 8:
        with(s_elidu(buffer_read(mibuffer, buffer_u8))){
            xd = buffer_read(mibuffer, buffer_u16);
            yd = buffer_read(mibuffer, buffer_u16);
        }
    break;
    
    case 9:
        with(s_elidu(buffer_read(mibuffer, buffer_u8))){
            municion = buffer_read(mibuffer, buffer_u8);
            switch(buffer_read(mibuffer, buffer_u8)){
                case 1:
                    dispara = 0;
                    alista = 0;
                    recarga = t_recarga;
                break;
                case 2:
                    dispara = 0;
                    alista = t_alista;
                    recarga = 0;
                break;
                case 3:
                    dispara = t_dispara;
                    alista = 0;
                    recarga = 0;
                break;
                default:
                    dispara = 0;
                    alista = 0;
                    recarga = 0;
                break;
            }
        }
    break;
    
    case 10:
        with(s_elidu(buffer_read(mibuffer, buffer_u8))){
            clase = buffer_read(mibuffer, buffer_u8);
        }
    break;
    
    case 11:
        with(s_elidu(buffer_read(mibuffer, buffer_u8))){
            salud = buffer_read(mibuffer, buffer_u8);
        }
    break;
    
    case 12:
        with(s_elidu(buffer_read(mibuffer, buffer_u8))){
            estado = buffer_read(mibuffer, buffer_u8);
            grupo = buffer_read(mibuffer, buffer_u8);
            if(estado == 2 or estado == 4){
                mask_index = -1;
            }
            else{
                mask_index = d_base0;
            }
            if(estado == 1 or estado == 3){
                salud = m_salud;
                municion = m_municion;
                revive = 0;
            }
        }
    break;
    
    case 13:
        var mapabuffer;
        mapabuffer = buffer_create(1, buffer_grow, 1);
        if(file_exists("mupa_temporal.ini")){
            file_delete("mupa_temporal.ini");
        }
        buffer_copy(mibuffer, 1, buffer_get_size(mibuffer) - 1, mapabuffer, 0);
        buffer_save(mapabuffer, "mupa_temporal.ini");
        buffer_delete(mapabuffer);
        s_leemapa("temporal");
        if(surface_exists(telon)){
            surface_free(telon);
        }
    break;
    
    case 15:
        var aux, lafle, xfan, yfan;
        lafle = buffer_read(mibuffer, buffer_u8);
        xfan = buffer_read(mibuffer, buffer_u16);
        yfan = buffer_read(mibuffer, buffer_u16);
        aux = instance_create(xfan, yfan, o_flecha);
        aux.direction = buffer_read(mibuffer, buffer_u16);
        aux.tipo = buffer_read(mibuffer, buffer_u8);
        aux.xyz = lafle;
    break;
    
    case 16:
        var lafle;
        lafle = buffer_read(mibuffer, buffer_u8);
        with(o_flecha){
            if(xyz == lafle){
                instance_destroy();
            }
        }
    break;
    
    case 17:
        winunidad = buffer_read(mibuffer, buffer_u8);
        wingrupo = buffer_read(mibuffer, buffer_u8);
    break;
    
    case 18:
        with(s_elidu(buffer_read(mibuffer, buffer_u8))){
            puntos = buffer_read(mibuffer, buffer_u8);
        }
    break;
    
    case 19:
        with(s_elidg(buffer_read(mibuffer, buffer_u8))){
            puntos = buffer_read(mibuffer, buffer_u8);
        }
    break;
    
    case 20:
        var rrr;
        with(s_elidu(myid)){
            grupo = buffer_read(mibuffer, buffer_u8);
            rrr = s_grupoazar(grupo);
            x = rrr.x;
            y = rrr.y;
            view_xview[0] = x - view_wview[0] * 0.5;
            view_yview[0] = y - view_hview[0] * 0.5;
            s_sonido(xyz, x, y, 4, -1, true);
        }
    break;
    
    case 21:
        with(s_elidg(buffer_read(mibuffer, buffer_u8))){
            puntos = buffer_read(mibuffer, buffer_u8);
            miembros = buffer_read(mibuffer, buffer_u8);
        }
    break;
    
    case 22:
        with(s_elidg(buffer_read(mibuffer, buffer_u8))){
            miembros = buffer_read(mibuffer, buffer_u8);
        }
    break;
    
    case 23:
        var fff;
        switch(buffer_read(mibuffer, buffer_u8)){
            case 0:
                fff = c_lime;
            break;
            case 1:
                fff = c_gray;
            break;
            case 4:
                fff = c_yellow;
            break;
            case 3:
                fff = c_red;
            break;
            default:
                fff = c_orange;
            break;
        }
        s_creanotificacion(fff, buffer_read(mibuffer, buffer_string), -1);
    break;
    
    case 24:
        with(s_elidu(myid)){
            revive = t_revive;
        }
    break;
    
    case 25:
        var quien, xxx, yyy, tipe;
        quien = buffer_read(mibuffer, buffer_u8);
        xxx = buffer_read(mibuffer, buffer_u16);
        yyy = buffer_read(mibuffer, buffer_u16);
        tipe = buffer_read(mibuffer, buffer_u8);
        s_sonido(quien, xxx, yyy, tipe, -1, false);
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>network_destroy(conexion);
network_destroy(cliente);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>network_destroy(conexion);
network_destroy(cliente);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>s_gamegui(id);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
