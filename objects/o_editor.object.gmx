<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = -50;

//0:nada, 1:arbol, 2:muro, 3:base0, 4:b1,
//5:b2, 6:b3, 7:b4, 8:decorado, 9:baldosa
seleccion = 0;

ajuda = false;//mostrar ayuda visual
telon = -1;
alarm[0] = room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///pintar mapa
var eee, xxx, yyy;
eee = 0.166666;
xxx = view_xview[0];
yyy = view_yview[0];
if(!surface_exists(telon)){
    telon = surface_create(440, 440);
}
surface_set_target(telon);
draw_clear_alpha(make_colour_rgb(199, 211, 154), 1);
with(oe_arbol){
    draw_sprite(d_minimapa, 0, x * eee, y * eee);
}
with(oe_muro){
    draw_sprite(d_minimapa, 1, x * eee, y * eee);
}
with(oe_bases){
    switch(object_index){
        case oe_base0:
            draw_sprite(d_minimapa, 2, x * eee, y * eee);
        break;
        case oe_base1:
            draw_sprite(d_minimapa, 3, x * eee, y * eee);
        break;
        case oe_base2:
            draw_sprite(d_minimapa, 4, x * eee, y * eee);
        break;
        case oe_base3:
            draw_sprite(d_minimapa, 5, x * eee, y * eee);
        break;
        case oe_base4:
            draw_sprite(d_minimapa, 6, x * eee, y * eee);
        break;
    }
}
surface_reset_target();

alarm[0] = room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = mouse_x;
y = mouse_y;
if(x &lt; view_xview[0]){
    x = view_xview[0];
}
else if(x &gt; view_xview[0] + view_wview[0]){
    x = view_xview[0] + view_wview[0];
}
if(y &lt; view_yview[0]){
    y = view_yview[0];
}
else if(y &gt; view_yview[0] + view_hview[0]){
    y = view_yview[0] + view_hview[0];
}
move_snap(24, 24);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(mouse_wheel_down()){
    ajuda = false;
    if(seleccion == 0){
        seleccion = 9;
    }
    else{
        seleccion--;
    }
}
else if(mouse_wheel_up()){
    ajuda = false;
    if(seleccion == 9){
        seleccion = 0;
    }
    else{
        seleccion++;
    }
}
else if(mouse_check_button_pressed(mb_left) or keyboard_check(ord('Z'))){
    if(x &gt;= 24 and x &lt; room_width - 24 and y &gt;= 96 and y &lt; room_height - 24){
    var aux, xx, yy;
    ajuda = false;
    switch(seleccion){
        case 1:
            aux = collision_rectangle(x - 23, y - 23, x + 47, y + 47, oe_bloque, 1, 1);
            if(!aux){
                xx = x;
                yy = y;
                aux = -1;
                with(oe_bases){
                    if(xx &gt;= x - 72 and xx &lt; x + 96 and yy &gt;= y - 72 and yy &lt; y + 96){
                        aux = 0;
                    }
                }
                if(aux == -1){
                    audio_play_sound(a_poner, 20, false);
                    instance_create(x, y, oe_arbol);
                    with(oe_decorado){
                        if(place_meeting(x, y, oe_arbol)){
                            instance_destroy();
                        }
                    }
                    with(oe_baldosa){
                        if(place_meeting(x, y, oe_arbol)){
                            instance_destroy();
                        }
                    }
                }
            }
        break;
        case 2:
            aux = collision_rectangle(x + 1, y + 1, x + 23, y + 23, oe_bloque, 1, 1);
            if(!aux){
                xx = x;
                yy = y;
                aux = -1;
                with(oe_bases){
                    if(xx &gt;= x - 72 and xx &lt; x + 96 and yy &gt;= y - 72 and yy &lt; y + 96){
                        aux = 0;
                    }
                }
                if(aux == -1){
                    audio_play_sound(a_poner, 20, false);
                    instance_create(x, y, oe_muro);
                    with(oe_decorado){
                        if(place_meeting(x, y, oe_muro)){
                            instance_destroy();
                        }
                    }
                }
            }
        break;
        case 3:
            if(instance_number(oe_base0) &lt; 4){
                aux = collision_circle(x + 12, y + 12, m_vision, oe_bases, 1, 1);
                if(!aux){
                    aux = collision_rectangle(x - 71, y - 71, x + 95, y + 95, oe_bloque, 1, 1);
                    if(!aux){
                        audio_play_sound(a_poner, 20, false);
                        instance_create(x, y, oe_base0);
                        with(oe_decorado){
                            if(place_meeting(x, y, oe_bases)){
                                instance_destroy();
                            }
                        }
                    }
                }
                else{
                    s_creamensaje("other near", c_lime);
                }
            }
            else{
                s_creamensaje("maximum 4", c_lime);
            }
        break;
        case 4:
            if(!instance_exists(oe_base1)){
                aux = collision_circle(x + 12, y + 12, m_vision, oe_bases, 1, 1);
                if(!aux){
                    aux = collision_rectangle(x - 71, y - 71, x + 95, y + 95, oe_bloque, 1, 1);
                    if(!aux){
                        audio_play_sound(a_poner, 20, false);
                        instance_create(x, y, oe_base1);
                        with(oe_decorado){
                            if(place_meeting(x, y, oe_bases)){
                                instance_destroy();
                            }
                        }
                    }
                }
                else{
                    s_creamensaje("other near", c_lime);
                }
            }
            else{
                s_creamensaje("maximum 1", c_lime);
            }
        break;
        case 5:
            if(!instance_exists(oe_base2)){
                aux = collision_circle(x + 12, y + 12, m_vision, oe_bases, 1, 1);
                if(!aux){
                    aux = collision_rectangle(x - 71, y - 71, x + 95, y + 95, oe_bloque, 1, 1);
                    if(!aux){
                        audio_play_sound(a_poner, 20, false);
                        instance_create(x, y, oe_base2);
                        with(oe_decorado){
                            if(place_meeting(x, y, oe_bases)){
                                instance_destroy();
                            }
                        }
                    }
                }
                else{
                    s_creamensaje("other near", c_lime);
                }
            }
            else{
                s_creamensaje("maximum 1", c_lime);
            }
        break;
        case 6:
            if(!instance_exists(oe_base3)){
                aux = collision_circle(x + 12, y + 12, m_vision, oe_bases, 1, 1);
                if(!aux){
                    aux = collision_rectangle(x - 71, y - 71, x + 95, y + 95, oe_bloque, 1, 1);
                    if(!aux){
                        audio_play_sound(a_poner, 20, false);
                        instance_create(x, y, oe_base3);
                        with(oe_decorado){
                            if(place_meeting(x, y, oe_bases)){
                                instance_destroy();
                            }
                        }
                    }
                }
                else{
                    s_creamensaje("other near", c_lime);
                }
            }
            else{
                s_creamensaje("maximum 1", c_lime);
            }
        break;
        case 7:
            if(!instance_exists(oe_base4)){
                aux = collision_circle(x + 12, y + 12, m_vision, oe_bases, 1, 1);
                if(!aux){
                    aux = collision_rectangle(x - 71, y - 71, x + 95, y + 95, oe_bloque, 1, 1);
                    if(!aux){
                        audio_play_sound(a_poner, 20, false);
                        instance_create(x, y, oe_base4);
                        with(oe_decorado){
                            if(place_meeting(x, y, oe_bases)){
                                instance_destroy();
                            }
                        }
                    }
                }
                else{
                    s_creamensaje("other near", c_lime);
                }
            }
            else{
                s_creamensaje("maximum 1", c_lime);
            }
        break;
        case 8:
            aux = collision_rectangle(x + 1, y + 1, x + 23, y + 23, oe_bloque, 1, 1);
            if(!aux){
                aux = collision_rectangle(x + 1, y + 1, x + 23, y + 23, oe_decorado, 1, 1);
            }
            if(!aux){
                aux = collision_rectangle(x + 1, y + 1, x + 23, y + 23, oe_baldosa, 1, 1);
            }
            if(!aux){
                audio_play_sound(a_poner, 20, false);
                instance_create(x, y, oe_decorado);
            }
        break;
        case 9:
            aux = collision_rectangle(x + 1, y + 1, x + 23, y + 23, oe_baldosa, 1, 1);
            if(!aux){
                audio_play_sound(a_poner, 20, false);
                instance_create(x, y, oe_baldosa);
                with(oe_decorado){
                    if(place_meeting(x, y, oe_baldosa)){
                        instance_destroy();
                    }
                }
                with(oe_arbol){
                    if(place_meeting(x, y, oe_baldosa)){
                        instance_destroy();
                    }
                }
            }
        break;
    }
    }
}
else if(mouse_check_button_pressed(mb_right) or keyboard_check(ord('X'))){
    var aux;
    ajuda = false;
    switch(seleccion){
        case 1:
            aux = collision_rectangle(x + 1, y + 1, x + 23, y + 23, oe_arbol, 1, 1);
            if(aux){
                audio_play_sound(a_quitar, 20, false);
                with(aux){
                    instance_destroy();
                }
            }
        break;
        case 2:
            aux = collision_rectangle(x + 1, y + 1, x + 23, y + 23, oe_muro, 1, 1);
            if(aux){
                audio_play_sound(a_quitar, 20, false);
                with(aux){
                    instance_destroy();
                }
            }
        break;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
            aux = collision_rectangle(x + 1, y + 1, x + 23, y + 23, oe_bases, 1, 1);
            if(aux){
                audio_play_sound(a_quitar, 20, false);
                with(aux){
                    instance_destroy();
                }
            }
        break;
        case 8:
            aux = collision_rectangle(x + 1, y + 1, x + 23, y + 23, oe_decorado, 1, 1);
            if(aux){
                audio_play_sound(a_quitar, 20, false);
                with(aux){
                    instance_destroy();
                }
            }
        break;
        case 9:
            aux = collision_rectangle(x + 1, y + 1, x + 23, y + 23, oe_baldosa, 1, 1);
            if(aux){
                audio_play_sound(a_quitar, 20, false);
                with(aux){
                    instance_destroy();
                }
            }
        break;
    }
}
else if(keyboard_check_pressed(vk_anykey)){
    switch(keyboard_key){
        case ord('W'):
            ajuda = false;
            if(seleccion == 9){
                seleccion = 0;
            }
            else{
                seleccion++;
            }
        break;
        case ord('S'):
            ajuda = false;
            if(seleccion == 0){
                seleccion = 9;
            }
            else{
                seleccion--;
            }
        break;
        case vk_space:
            ajuda = false;
            seleccion = 0;
        break;
        case vk_enter:
            ajuda = false;
            s_guardaeditor(o_control.mapa);
        break;
        case ord('8'):
            ajuda = false;
            if(instance_exists(oe_arbol)){
                audio_play_sound(a_quitar, 20, false);
                with(oe_arbol){
                    instance_destroy();
                }
            }
            else{
                var xx, yy, aux;
                audio_play_sound(a_poner, 20, false);
                repeat(round((room_width / 24) * (room_height / 24) * (1 + irandom(9)) * 0.01)){
                    xx = (1 + irandom((room_width / 24) - 3)) * 24;
                    yy = (4 + irandom((room_height / 24) - 6)) * 24;
                    aux = collision_rectangle(xx - 23, yy - 23, xx + 47, yy + 47, oe_bloque, 1, 1);
                    if(!aux){
                        aux = collision_rectangle(xx + 1, yy + 1, xx + 23, yy + 23, oe_baldosa, 1, 1);
                    }
                    if(!aux){
                        aux = -1;
                        with(oe_bases){
                            if(xx &gt;= x - 72 and xx &lt; x + 96 and yy &gt;= y - 72 and yy &lt; y + 96){
                                aux = 0;
                            }
                        }
                        if(aux == -1){
                            instance_create(xx, yy, oe_arbol);
                            with(oe_decorado){
                                if(place_meeting(x, y, oe_arbol)){
                                    instance_destroy();
                                }
                            }
                        }
                    }
                }
            }
        break;
        case ord('9'):
            ajuda = false;
            if(instance_exists(oe_decorado)){
                audio_play_sound(a_quitar, 20, false);
                with(oe_decorado){
                    instance_destroy();
                }
            }
            else{
                var xx, yy, aux;
                audio_play_sound(a_poner, 20, false);
                repeat(round((room_width / 24) * (room_height / 24) * (1 + irandom(19)) * 0.01)){
                    xx = (1 + irandom((room_width / 24) - 3)) * 24;
                    yy = (4 + irandom((room_height / 24) - 6)) * 24;
                    aux = collision_rectangle(xx + 1, yy + 1, xx + 23, yy + 23, oe_bloque, 1, 1);
                    if(!aux){
                        aux = collision_rectangle(xx + 1, yy + 1, xx + 23, yy + 23, oe_decorado, 1, 1);
                    }
                    if(!aux){
                        aux = collision_rectangle(xx + 1, yy + 1, xx + 23, yy + 23, oe_baldosa, 1, 1);
                    }
                    if(!aux){
                        instance_create(xx, yy, oe_decorado);
                    }
                }
            }
        break;
        case ord('R'):
            ajuda = false;
            audio_play_sound(a_poner, 20, false);
            with(oe_arbol){
                direction = irandom(7);
            }
            with(oe_decorado){
                direction = irandom(8);
            }
        break;
        case vk_f1:
            if(ajuda){
                ajuda = false;
            }
            else{
                ajuda = true;
            }
        break;
        default:
            ajuda = false;
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>s_guardaeditor(o_control.mapa);
if(surface_exists(telon)){
    surface_free(telon);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>s_guardaeditor(o_control.mapa);
if(surface_exists(telon)){
    surface_free(telon);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(seleccion &gt; 2 and seleccion &lt; 8){
    draw_rectangle_colour(x - 71, y - 71, x + 95, y + 95,
        c_lime, c_lime, c_lime, c_lime, true);
}
if(seleccion &gt; 0){
    draw_sprite_ext(d_editor, seleccion - 1, x, y, 1, 1, 0, -1, 0.7);
}

var xxx, yyy, eee;
xxx = view_xview[0];
yyy = view_yview[0];
eee = 0.166666 * 0.25;

//pintar mapa
if(surface_exists(telon)){
    draw_surface_ext(telon, xxx, yyy, 0.25, 0.25, 0, c_white, 0.75);
}
draw_set_alpha(0.75);
draw_rectangle_colour(xxx + 1, yyy + 1, xxx + 109, yyy + 109, c_maroon, c_maroon, c_maroon, c_maroon, true);
draw_rectangle_colour(xxx + xxx * eee, yyy + yyy * eee, xxx + (xxx + view_wview[0]) * eee,
    yyy + (yyy + view_hview[0]) * eee, c_maroon, c_maroon, c_maroon, c_maroon, true);
draw_point(xxx + mouse_x * eee, yyy + mouse_y * eee);
draw_set_alpha(1);

//textos de ayuda selection
draw_set_valign(fa_bottom);
draw_set_halign(fa_left);
switch(seleccion){
    case 1:
        draw_text_transformed_colour(xxx + 5, yyy + view_hview[0] - 5,
            "tree, solid object",
            0.7, 0.7, 0, c_dkgray, c_dkgray, c_dkgray, c_dkgray, 1);
    break;
    case 2:
        draw_text_transformed_colour(xxx + 5, yyy + view_hview[0] - 5,
            "wall, solid object",
            0.7, 0.7, 0, c_dkgray, c_dkgray, c_dkgray, c_dkgray, 1);
    break;
    case 3:
        draw_text_transformed_colour(xxx + 5, yyy + view_hview[0] - 5,
            "neutral base, maximum 4, solid object",
            0.7, 0.7, 0, c_dkgray, c_dkgray, c_dkgray, c_dkgray, 1);
    break;
    case 4:
    case 5:
    case 6:
    case 7:
        draw_text_transformed_colour(xxx + 5, yyy + view_hview[0] - 5,
            "group base, maximum 1, solid object",
            0.7, 0.7, 0, c_dkgray, c_dkgray, c_dkgray, c_dkgray, 1);
    break;
    case 8:
        draw_text_transformed_colour(xxx + 5, yyy + view_hview[0] - 5,
            "decoration, no solid object",
            0.7, 0.7, 0, c_dkgray, c_dkgray, c_dkgray, c_dkgray, 1);
    break;
    case 9:
        draw_text_transformed_colour(xxx + 5, yyy + view_hview[0] - 5,
            "floor, down all, no solid object",
            0.7, 0.7, 0, c_dkgray, c_dkgray, c_dkgray, c_dkgray, 1);
    break;
}

draw_sprite(d_botones, 20, xxx + view_wview[0] - 24, yyy + 24);

draw_set_valign(fa_top);
draw_set_halign(fa_center);
draw_text_colour(xxx + view_wview[0] * 0.5, yyy + 4, o_control.mapa, c_black, c_black, c_black, c_black, 1);

if(ajuda){
    draw_sprite(d_help, 0, xxx + view_wview[0] * 0.5,
        yyy + view_hview[0] * 0.5);
}

draw_sprite(d_mouse, 0, mouse_x + 12, mouse_y + 12);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
