<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = -room_height * 2;
ajuda = false;//mostrar ayuda visual
puerto = 1024;
conexion = network_create_server(network_socket_tcp, puerto, m_unidades);
ping = m_ping;
proyectiles = 1;
telon = -1;
winu = false;
wing = false;
alarm[0] = 1;

while(conexion &lt; 0 and puerto &lt; 65535){
    puerto++;
    conexion = network_create_server(network_socket_tcp, puerto, m_unidades);
}
if(conexion &lt; 0){
    s_creamensaje("connection fail", c_orange);
    room_goto(w_menu);
}
else if(o_control.q_nombre != ""){
    s_leemapa(o_control.mapa);
    if(s_haybases()){
        s_creaunidades();
        s_creanpcs();
        myid = 1;
        with(s_elidu(myid)){
            nombre = o_control.q_nombre;
            wee = string_width(nombre) / 56;
            idioma = o_control.q_idioma;
            pelo = o_control.q_pelo;
            socket = -2;
            revive = t_revive * 2;
            view_xview[0] = x - view_wview[0] * 0.5;
            view_yview[0] = y - view_hview[0] * 0.5;
        }
        with(o_base){
            s_actualigrupo(id);
        }
        //crear archivo de eventos del juego
        var fff;
        if(file_exists("game_log.txt")){
            file_delete("game_log.txt");
        }
        fff = file_text_open_write("game_log.txt");
        file_text_write_string(fff, "server started by " + o_control.q_nombre);
        file_text_writeln(fff);
        if(porpuntos){
            file_text_write_string(fff, "modality: for points");
            file_text_writeln(fff);
        }
        else{
            file_text_write_string(fff, "modality: for lives");
            file_text_writeln(fff);
        }
        file_text_close(fff);
    }
    else{
        s_creamensaje("incomplete map", c_orange);
        room_goto(w_menu);
    }
}
else{
    s_creamensaje("null name", c_orange);
    room_goto(w_menu);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///pintar mapa
var eee, xxx, yyy;
eee = 0.083333;
xxx = view_xview[0];
yyy = view_yview[0];

if(!surface_exists(telon)){
    telon = surface_create(440, 440);
    surface_set_target(telon);
    draw_clear_alpha(make_colour_rgb(199, 211, 154), 1);
    with(o_arbol){
        draw_sprite(d_minimapa, 0, (x - 24) * eee, (y - 24) * eee);
    }
    with(o_muro){
        draw_sprite(d_minimapa, 1, (x - 24) * eee, (y - 24) * eee);
    }
    with(o_base){
        switch(xyz){
            case 0:
                draw_sprite(d_minimapa, 2, (x - 24) * eee, (y - 24) * eee);
            break;
            case 1:
                draw_sprite(d_minimapa, 3, (x - 24) * eee, (y - 24) * eee);
            break;
            case 2:
                draw_sprite(d_minimapa, 4, (x - 24) * eee, (y - 24) * eee);
            break;
            case 3:
                draw_sprite(d_minimapa, 5, (x - 24) * eee, (y - 24) * eee);
            break;
            case 4:
                draw_sprite(d_minimapa, 6, (x - 24) * eee, (y - 24) * eee);
            break;
        }
    }
    surface_reset_target();
}

alarm[0] = room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///mostrar ayuda
if(ajuda){
    if(keyboard_check(vk_anykey)){
        ajuda = false;
    }
    else if(mouse_check_button(mb_any)){
        ajuda = false;
    }
}
else if(keyboard_check_released(vk_f1)){
    ajuda = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ping
ping -= delta_time * 0.000001;
if(ping &lt;= 0){
    ping = m_ping;
    s_env5();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(ds_map_find_value(async_load, "type")){
    case network_type_connect:
        s_env0(ds_map_find_value(async_load, "socket"));
    break;
    case network_type_disconnect:
        var quien, ggg;
        ggg = -1;
        quien = ds_map_find_value(async_load, "socket");
        with(o_unidad){
            if(socket == quien){
                ggg = grupo;
                socket = -1;
                if(estado == 1){
                    estado = 0;
                    s_env12(xyz, estado, grupo, -1);
                }
                s_creanotificacion(c_gray, nombre + "#$disconnected", -1);
                break;
            }
        }
        s_actualigrupo(s_elidg(ggg));
    break;
    case network_type_data:
        var mibuffer;
        mibuffer = ds_map_find_value(async_load, "buffer");
        buffer_seek(mibuffer, buffer_seek_start, 0);
        switch(buffer_read(mibuffer, buffer_u8)){
            
            case 1:
                var d0, d1, d2, d3;
                d0 = buffer_read(mibuffer, buffer_u16);
                d1 = buffer_read(mibuffer, buffer_u8);
                d2 = buffer_read(mibuffer, buffer_u8);
                d3 = buffer_read(mibuffer, buffer_string);
                if(s_nombrerepetido(d3)){
                    s_env2(d0);
                }
                else{
                    var nnn;
                    nnn = s_buscajugador(d3, true);
                    if(nnn != -1){
                        var grf;
                        with(s_elidu(nnn)){
                            socket = d0;
                            idioma = d1;
                            pelo = d2;
                            nombre = d3;
                            wee = string_width(nombre) / 56;
                            if(estado == 0){
                                grf = s_elidg(grupo);
                                if(porpuntos or grf.puntos &lt; mg_muertes){
                                    estado = 1;
                                    revive = 0;
                                    s_sonido(xyz, x, y, 4, -1, true);
                                }
                                else{
                                    estado = 2;
                                    mask_index = -1;
                                }
                            }
                            s_creanotificacion(c_lime, nombre + "#$reconnected", nnn);
                            s_env3(socket, nnn, x, y, revive);
                            s_env4(id, -1);//sincroniza todos
                        }
                        with(o_unidad){
                            if(xyz != nnn){
                                s_env4(id, nnn);
                            }
                        }
                        s_env13(d0);
                        with(o_base){
                            s_env21(d0, xyz, puntos, miembros);
                        }
                    }
                    else{
                        nnn = s_buscajugador(d3, false);
                        if(nnn != -1){
                            with(s_elidu(nnn)){
                                socket = d0;
                                idioma = d1;
                                pelo = d2;
                                nombre = d3;
                                wee = string_width(nombre) / 56;
                                estado = 0;
                                mask_index = d_base0;
                                revive = t_revive * 2;
                                s_creanotificacion(c_lime, nombre + "#$connected", nnn);
                                s_env3(socket, nnn, x, y, revive);
                                s_env4(id, -1);//sincroniza todos
                            }
                            with(o_unidad){
                                if(xyz != nnn){
                                    s_env4(id, nnn);
                                }
                            }
                            s_env13(d0);
                            with(o_base){
                                s_env21(d0, xyz, puntos, miembros);
                            }
                        }
                        else{
                            s_env2(d0);
                        }
                    }
                }
            break;
            
            case 6:
                with(s_elidu(buffer_read(mibuffer, buffer_u8))){
                    energia = buffer_read(mibuffer, buffer_u8);
                    s_env6(xyz, energia, xyz);
                }
            break;
            
            case 7:
                with(s_elidu(buffer_read(mibuffer, buffer_u8))){
                    expresion = buffer_read(mibuffer, buffer_u8);
                    expresa = t_expresa;
                    s_env7(xyz, expresion, xyz);
                }
            break;
            
            case 8:
                with(s_elidu(buffer_read(mibuffer, buffer_u8))){
                    xd = buffer_read(mibuffer, buffer_u16);
                    yd = buffer_read(mibuffer, buffer_u16);
                    s_env8(xyz, xd, yd, xyz);
                }
            break;
            
            case 9:
                var tmpp;
                with(s_elidu(buffer_read(mibuffer, buffer_u8))){
                    municion = buffer_read(mibuffer, buffer_u8);
                    tmpp = buffer_read(mibuffer, buffer_u8);
                    switch(tmpp){
                        case 1:
                            dispara = 0;
                            alista = 0;
                            recarga = t_recarga;
                        break;
                        case 2:
                            dispara = 0;
                            alista = t_alista;
                            recarga = 0;
                        break;
                        case 3:
                            dispara = t_dispara;
                            alista = 0;
                            recarga = 0;
                        break;
                        default:
                            dispara = 0;
                            alista = 0;
                            recarga = 0;
                        break;
                    }
                    s_env9(xyz, municion, tmpp, xyz);
                }
            break;
            
            case 10:
                with(s_elidu(buffer_read(mibuffer, buffer_u8))){
                    clase = buffer_read(mibuffer, buffer_u8);
                    s_env10(xyz, clase, xyz);
                }
            break;
            
            case 12:
                with(s_elidu(buffer_read(mibuffer, buffer_u8))){
                    estado = buffer_read(mibuffer, buffer_u8);
                    grupo = buffer_read(mibuffer, buffer_u8);
                    if(estado == 2 or estado == 4){
                        mask_index = -1;
                    }
                    else{
                        mask_index = d_base0;
                    }
                    if(estado == 1 or estado == 3){
                        salud = m_salud;
                        municion = m_municion;
                    }
                    s_env12(xyz, estado, grupo, xyz);
                }
            break;
            
            case 14:
                var aux, mia, xfan, yfan, klk;
                mia = buffer_read(mibuffer, buffer_u8);
                klk = s_elidu(mia);
                if(klk.estado == 1){
                    xfan = buffer_read(mibuffer, buffer_u16);
                    yfan = buffer_read(mibuffer, buffer_u16);
                    aux = instance_create(xfan, yfan, o_flecha);
                    aux.direction = buffer_read(mibuffer, buffer_u16);
                    aux.lanzador = mia;
                    aux.tipo = buffer_read(mibuffer, buffer_u8);
                    aux.xyz = s_idflechazo();
                    s_env15(aux.xyz, aux.x, aux.y, aux.direction, aux.tipo);
                }
            break;
            
            case 25:
                var quien, xxx, yyy, tipe;
                quien = buffer_read(mibuffer, buffer_u8);
                xxx = buffer_read(mibuffer, buffer_u16);
                yyy = buffer_read(mibuffer, buffer_u16);
                tipe = buffer_read(mibuffer, buffer_u8);
                s_sonido(quien, xxx, yyy, tipe, quien, true);
            break;
        }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>network_destroy(conexion);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>network_destroy(conexion);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>s_gamegui(id);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
