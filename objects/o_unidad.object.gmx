<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_objeto</parentName>
  <maskName>d_base0</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///inicializacion

//datos generales
xyz = 0;
nombre = "";
idioma = 0;
pelo = 0;
grupo = 0;
clase = 0;
puntos = 0;
expresion = 0;
municion = m_municion;
salud = m_salud;
estado = 0;

//datos sincronizacion
socket = -1;//-2 servidor, -3 npcs
xd = x;
yd = y;
xu = x;
yu = y;
forzar = false;
alarm[0] = room_speed;

//datos ia
xm = x;
ym = y;
xb = x;
yb = y;
blanco = -1;
lider = -1;
cambiopasos = t_cambiopasos;
direvel = -1;
esquive = 0;
rodeo = 90;
mp_potential_settings(40, 20, 3, true);

//temporizadores
dispara = 0;
alista = 0;
recarga = 0;
energia = 1;
regenera = 0;
expresa = 0;
revive = 0;

//otros
paso =  1 + irandom(3);
anima = t_anima;
delta = 0;
wee = 0.17857;//proporcion para escalar fondo de nombre
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>forzar = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///enviar posicion

if(s_responsable(id) and (forzar or point_distance(x, y, xu, yu) &gt; m_minxy)){
    alarm[0] = room_speed;
    forzar = false;
    xu = x;
    yu = y;
    s_env8(xyz, xu, yu, -1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///temporizadores
delta = delta_time * 0.000001;

//expresandose
if(expresa &gt; 0){
    var ant0;
    ant0 = expresa;
    expresa -= delta;
    if(ant0 &gt;= t_expresa * 0.75 and expresa &lt; t_expresa * 0.75){
        s_expresa(expresion, x, y, idioma);
        if(xyz != myid){
            if(expresion == 0){
                if(!s_mismogrupo(grupo)){
                    instance_create(x, y, o_alertisima);
                }
            }
            else if(expresion == 2){
                if(s_mismogrupo(grupo)){
                    var cch;
                    cch = instance_create(x, y, o_alertisima);
                    cch.direction = 1;
                }
            }
        }
    }
    if(expresa &lt;= 0){
        expresa = 0;
    }
}

//cargando poder
if(s_responsable(id)){
    if(energia &gt; 1){
        energia -= delta;
        if(energia &lt;= 1){
            energia = 1;
            s_env6(xyz, energia, -1);
            s_sonido(xyz, x, y, 7, -1, true);
        }
    }
}

//curandose (solo server)
if(!escliente){
    if(regenera &gt; 0 and (regeplus or clase == 4)){
        regenera -= delta;
        if(regenera &lt;= 0){
            if(salud &lt; m_salud and salud &gt; 0){
                salud++;
                s_env11(xyz, salud);
                s_sonido(xyz, x, y, 5, -1, true);
                if(salud &lt; m_salud){
                    regenera = t_regenera;
                }
                else{
                    regenera = 0;
                }
            }
            else{
                regenera = 0;
            }
        }
    }
}

//recargando municion
if(recarga &gt; 0){
    recarga -= delta;
    if(recarga &lt;= 0){
        if(municion &lt; m_municion + 1){
            if(s_responsable(id)){
                if(s_lidercercano(grupo, x, y, clase)){
                    municion += 2;
                    if(municion &gt; m_municion + 1){
                        municion = m_municion + 1;
                    }
                }
                else{
                    municion++;
                }
            }
            else{
                municion++;
            }
            s_sonido(xyz, x, y, 11, -1, false);
            if(municion &lt; m_municion + 1){
                recarga = t_recarga;
                if(s_responsable(id)){
                    s_env9(xyz, municion, 1, -1);
                }
            }
            else{
                recarga = 0;
                alista = t_alista;
                if(s_responsable(id)){
                    s_env9(xyz, municion, 2, -1);
                }
            }
        }
        else{
            recarga = 0;
            alista = t_alista;
            if(s_responsable(id)){
                s_env9(xyz, municion, 2, -1);
            }
        }
    }
}

//alistando disparo
if(alista &gt; 0){
    var ant1;
    ant1 = alista;
    alista -= delta;
    if(ant1 &gt;= t_alista * 0.5 and alista &lt; t_alista * 0.5){
        municion--;
    }
    if(alista &lt;= 0){
        alista = 0;
        if(s_responsable(id)){
            s_env9(xyz, municion, 0, -1);
        }
    }
}

//disparando
if(dispara &gt; 0){
    var ant2;
    ant2 = dispara;
    dispara -= delta;
    if(s_responsable(id)){
        if(ant2 &gt;= t_dispara * 0.5 and dispara &lt; t_dispara * 0.5){
            ss_crearflecha(id);
        }
    }
    if(dispara &lt;= 0){
        dispara = 0;
        if(municion &gt; 0){
            if(clase == 1){
                municion--;
                if(s_responsable(id)){
                    s_env9(xyz, municion, 0, -1);
                }
            }
            else{
                alista = t_alista;
                if(s_responsable(id)){
                    s_env9(xyz, municion, 2, -1);
                }
            }
        }
        else{
            recarga = t_recarga;
            if(s_responsable(id)){
                s_env9(xyz, municion, 1, -1);
            }
        }
    }
}

//reviviendo
if(revive &gt; 0){
    revive -= delta;
    if(revive &lt;= 0){
        revive = 0;
        //(solo server)
        if(!escliente){
            ss_revivir(id);
        }
    }
}

//animacion pies
anima -= delta;
if(anima &lt;= 0){
    anima = t_anima;
    if(paso == 4){
        paso = 1;
    }
    else{
        paso++;
    }
}

//cambia movimiento aleatorio (solo server)
if(!escliente){
    cambiopasos -= delta;
    if(cambiopasos &lt;= 0){
        cambiopasos = t_cambiopasos * 0.5 + random(t_cambiopasos * 0.5);
        if(direvel == -1){
            direvel = choose(-1, -1, -1, irandom(359));
        }
        else{
            var bbb;
            bbb = s_sumangulos(direvel, choose(1, -1) * irandom(45));
            direvel = choose(-1, bbb, bbb, bbb);
        }
        esquive = irandom(60);
        rodeo = choose(60 + esquive, -(60 + esquive));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///comportamiento

switch(estado){
    case 0:
        if(xyz == myid){
            if(ss_rebote(id)){
                ss_mover(id);
            }
        }
        else if(escliente){
            ss_actualizelo(id);
        }
        else if(socket &gt; -1){
            ss_actualizelo(id);
        }
        else{
            if(ss_rebote(id)){
                if(socket == -3){
                    ss_errar(id);
                }
                else{
                    var rrr;
                    rrr = collision_circle(x, y, 96, o_base, true, true);
                    if(rrr){
                        rrr = point_direction(rrr.x, rrr.y, x, y);
                        x += lengthdir_x(m_caminar * delta, rrr);
                        y += lengthdir_y(m_caminar * delta, rrr);
                        if(direvel != -1){
                            direvel = irandom(359);
                        }
                    }
                    else{
                        ss_errar(id);
                    }
                }
            }
        }
        //(solo server)
        if(!escliente){
            if(socket &gt; -1 or socket == -2){
                var kkk;
                kkk = collision_circle(x, y, 48, o_base, true, true);
                if(kkk){
                    if(porpuntos or kkk.puntos &lt; mg_muertes){
                        revive = 0;
                        grupo = kkk.xyz;
                        estado = 1;
                        s_actualigrupo(kkk);
                        s_env12(xyz, estado, grupo, -1);
                        s_sonido(xyz, x, y, 4, -1, true);
                    }
                }
            }
        }
    break;
    case 1:
        if(xyz == myid){
            ss_mouse(id);
            ss_teclas(id);
            if(ss_rebote(id)){
                ss_mover(id);
            }
        }
        else{
            ss_actualizelo(id);
        }
    break;
    case 2:
        if(xyz == myid){
            ss_mover(id);
        }
        else{
            ss_actualizelo(id);
        }
    break;
    case 3:
        if(escliente){
            ss_actualizelo(id);
        }
        else{
            ss_ia(id);
        }
    break;
    case 4:
        if(escliente){
            ss_actualizelo(id);
        }
        else{
            if(revive &gt; 0 and grupo &gt; 0){
                if(point_distance(x, y, xm, ym) &lt; 64){
                    direvel = point_direction(xm, ym, x, y);
                }
                else if(point_distance(x, y, xm, ym) &gt; 96){
                    direvel = point_direction(x, y, xm, ym);
                }
                else{
                    direvel = -1;
                }
            }
            ss_errar(id);
        }
    break;
}
ss_limites(id);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///dibujado
draw_sprite(d_sombra, 0, x, y);
if(xyz == myid){
    draw_sprite(d_seleccion, grupo, x, y);
}

var lienzo, xl, yl, c_c;
xl = 100;
yl = 174;
lienzo = surface_create(xl * 2, yl + 10);
surface_set_target(lienzo);
draw_clear_alpha(c_black, 0);

//capa en espalda
if(clase == 5 and (estado == 1 or estado == 2)){
    draw_sprite(d_capa, grupo, xl, yl);
}

//miembros inferiores
if(xprevious == x and yprevious == y){
    draw_sprite(d_patas, 0, xl, yl);
}
else{
    draw_sprite(d_patas, paso, xl, yl);
}
//canasta con municiones
switch(estado){
    case 1:
    case 3:
        draw_sprite(d_municion, municion, xl, yl);
    break;
}
//bandera de estatus
if(winunidad == xyz){
    draw_sprite(d_banderin, grupo, xl, yl);
}
//cuerpo y cabeza
switch(estado){
    case 0:
        draw_sprite(d_campcuerpo, 0, xl, yl);
        draw_sprite(d_otrospelos, 0, xl, yl);
    break;
    case 1:
    case 2:
        switch(grupo){
            case 0:
                draw_sprite(d_cuerpos0, clase, xl, yl);
            break;
            case 1:
                draw_sprite(d_cuerpos1, clase, xl, yl);
            break;
            case 2:
                draw_sprite(d_cuerpos2, clase, xl, yl);
            break;
            case 3:
                draw_sprite(d_cuerpos3, clase, xl, yl);
            break;
            case 4:
                draw_sprite(d_cuerpos4, clase, xl, yl);
            break;
        }
        draw_sprite(d_pelos, pelo, xl, yl);
    break;
    case 3:
    case 4:
        draw_sprite(d_botcuerpos, grupo, xl, yl);
        draw_sprite(d_otrospelos, 1, xl, yl);
    break;
}
//brazo izquierdo
if(expresa == 0){
    draw_sprite(d_prexpresa, 0, xl, yl);
}
else if(expresa &lt; t_expresa * 0.2){
    draw_sprite(d_prexpresa, floor((4 / (t_expresa * 0.2)) * expresa), xl, yl);
}
else if(expresa &lt;= t_expresa * 0.8){
    draw_sprite(d_expresion, expresion, xl, yl);
}
else{
    draw_sprite(d_prexpresa, floor((-4 / (t_expresa * 0.2)) * (expresa - t_expresa * 0.8) + 4), xl, yl);
}
//heridas o puntos de vida
draw_sprite(d_heridas, salud, xl, yl);
//brazo derecho
switch(estado){
    case 1:
    case 3:
        if(dispara != 0){
            draw_sprite(d_dispara, floor((15.999 / t_dispara) * dispara), xl, yl);
        }
        else if(alista != 0){
            draw_sprite(d_alista, floor((7.999 / t_alista) * alista), xl, yl);
        }
        else if(recarga != 0){
            if(paso &lt; 3){
                draw_sprite(d_recarga, 0, xl, yl);
            }
            else{
                draw_sprite(d_recarga, 1, xl, yl);
            }
        }
        else{
            draw_sprite(d_dispara, 8, xl, yl);
        }
    break;
    default:
        draw_sprite(d_dispara, 0, xl, yl);
    break;
}

//pintar unidad con transparencia si es fantasma
surface_reset_target();
switch(estado){
    case 2:
    case 4:
        draw_surface_ext(lienzo, x - xl, y - yl + 7, 1, 1, 0, c_white, 0.6);
    break;
    default:
        draw_surface(lienzo, x - xl, y - yl + 7);
    break;
}
surface_free(lienzo);

//pintar estado energia
if(estado == 1 or estado == 3){
    if(nombre == ""){
        if(energia == 0){
            draw_sprite_ext(d_energia, grupo, x, y - yl * 0.94, wee, 1, 0, -1, 1);
        }
        else if(energia == 1){
            draw_sprite_ext(d_energia, grupo, x, y - yl * 0.94, wee, 1, 0, -1, 0.5);
        }
    }
    else{
        switch(clase){
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
                if(energia == 0){
                    draw_sprite_ext(d_energia, grupo, x, y - yl * 0.94, wee, 1, 0, -1, 1);
                }
                else if(energia == 1){
                    draw_sprite_ext(d_energia, grupo, x, y - yl * 0.94, wee, 1, 0, -1, 0.5);
                }
            break;
        }
    }
}

//pintar nombre de unidad
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
if(estado == 0 or estado == 2){
    c_c = c_dkgray;
}
else{
    c_c = c_black;
}
draw_text_colour(x, y - yl * 0.94, nombre, c_c, c_c, c_c, c_c, 1);

//pintar puntos o muertes
if(estado &gt; 0){
    if(porpuntos){
        draw_text_transformed_colour(x, y - yl, string(puntos),
            0.8, 0.8, 0, c_dkgray, c_dkgray, c_dkgray, c_dkgray, 1);
    }
    else{
        draw_text_transformed_colour(x, y - yl, string(m_muertes - puntos),
            0.8, 0.8, 0, c_dkgray, c_dkgray, c_dkgray, c_dkgray, 1);
    }
}

//debug
//draw_circle_colour(x, y, m_vision, c_black, c_black, true);
//draw_line_colour(x, y, xm, ym, c_blue, c_blue);
//draw_line_colour(x, y, xb, yb, c_red, c_red);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
